---
openapi: "3.0.1"
info: 
  title: "S-IMSY API"
  description: "A RESTful API to interact with the simsy Programmable Mobile Network"
  termsOfService: "https://simsy.com"
  contact: 
    name: "simsy Contact"
    url: "https://simsy.com"
  license: 
    name: "simsy License"
    url: "https://simsy.com"
  version: "v1"
servers: 
- url: "https://api.simsy.com"
paths: 
  /api/v1/apitokens: 
    get: 
      tags: 
      - "API Tokens"
      summary: "List the API Tokens used to access this API"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/ApiTokenReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/ApiTokenReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/ApiTokenReadModelV1ListMethodResult"
    post: 
      tags: 
      - "API Tokens"
      summary: "Create a Token"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/ApiTokenUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/ApiTokenUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/ApiTokenUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/apitokens/{apiTokenId}: 
    get: 
      tags: 
      - "API Tokens"
      summary: "Get a specific token"
      description: ""
      parameters: 
      - name: "apiTokenId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/ApiTokenReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/ApiTokenReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/ApiTokenReadModelV1MethodResult"
    put: 
      tags: 
      - "API Tokens"
      summary: "Update a specific token"
      description: ""
      parameters: 
      - name: "apiTokenId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/ApiTokenUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/ApiTokenUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/ApiTokenUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
    delete: 
      tags: 
      - "API Tokens"
      summary: "Delete a specific token"
      description: ""
      parameters: 
      - name: "apiTokenId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/apitokens/verify: 
    get: 
      tags: 
      - "API Tokens"
      summary: "Test if a token is valid"
      description: "The token to be verified needs to be provided in the Authorization HTTP header as Bearer {token}"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/auditactivity: 
    get: 
      tags: 
      - "Audit"
      summary: "Fetch the logged audit activities on the account"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/AuditReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/AuditReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/AuditReadModelV1MethodResultList"
  /api/v1/authorizations/customerSystemFunctions: 
    get: 
      tags: 
      - "Authorization"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int32ArrayMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int32ArrayMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int32ArrayMethodResult"
  /api/v1/authorizations: 
    get: 
      tags: 
      - "Authorization"
      summary: "Get the role(s) of the current user"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/AuthorizationsReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/AuthorizationsReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/AuthorizationsReadModelV1MethodResult"
  /api/v1/customer: 
    get: 
      tags: 
      - "Customer Accounts"
      summary: "Get Customer"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/CustomerReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/CustomerReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/CustomerReadModelV1MethodResult"
  /api/v1/customer/address: 
    get: 
      tags: 
      - "Customer Accounts"
      summary: "Get Customer address"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/CustomerAddressViewModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/CustomerAddressViewModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/CustomerAddressViewModelV1MethodResult"
  /api/v1/customer/activesponsors: 
    get: 
      tags: 
      - "Customer Accounts"
      summary: "Get active customer sponsors"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/SponsorOperatorViewModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/SponsorOperatorViewModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/SponsorOperatorViewModelV1MethodResultList"
  /api/v1/account: 
    get: 
      tags: 
      - "Customer Accounts"
      summary: "Get details of account"
      description: ""
      parameters: 
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/LedgerAccountReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/LedgerAccountReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/LedgerAccountReadModelV1MethodResult"
  /api/v1/account/transactions: 
    get: 
      tags: 
      - "Customer Accounts"
      summary: "List Account Transactions"
      description: ""
      parameters: 
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/LedgerTransactionReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/LedgerTransactionReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/LedgerTransactionReadModelV1MethodResultList"
  /api/v1/edgeservices/{idOrMoniker}: 
    get: 
      tags: 
      - "Edge Services"
      summary: "Get a specific Edge Service"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResult"
    put: 
      tags: 
      - "Edge Services"
      summary: "Update an Edge Service"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EdgeServiceUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EdgeServiceUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EdgeServiceUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Edge Services"
      summary: "Delete a specific Routing Target"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/edgeservices: 
    get: 
      tags: 
      - "Edge Services"
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EdgeServiceListModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EdgeServiceListModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EdgeServiceListModelV1MethodResultList"
    post: 
      tags: 
      - "Edge Services"
      summary: "Create an Edge Service"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EdgeServiceUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EdgeServiceUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EdgeServiceUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/endpointgroups: 
    get: 
      tags: 
      - "Endpoint Groups"
      summary: "List the Endpoint Groups"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointGroupReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointGroupReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointGroupReadModelV1MethodResultList"
    post: 
      tags: 
      - "Endpoint Groups"
      summary: "Create an Endpoint Group"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EndpointGroupUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EndpointGroupUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EndpointGroupUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/endpointgroups/{idOrMoniker}: 
    get: 
      tags: 
      - "Endpoint Groups"
      summary: "Create a new Endpoint Group"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointGroupReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointGroupReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointGroupReadModelV1MethodResult"
    put: 
      tags: 
      - "Endpoint Groups"
      summary: "Update an existing Endpoint Group"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EndpointGroupUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EndpointGroupUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EndpointGroupUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Endpoint Groups"
      summary: "Delete an Endpoint Group"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/endpointgroups/{idOrMoniker}/endpoints: 
    post: 
      tags: 
      - "Endpoint Groups"
      summary: "Add Endpoints to an Endpoint Group"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EndpointAddRemoveGroupV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EndpointAddRemoveGroupV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EndpointAddRemoveGroupV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/endpointgroups/{idOrMoniker}/endpoints/{endpointId}: 
    delete: 
      tags: 
      - "Endpoint Groups"
      summary: "Remove an Endpoint from an Endpoint Group"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "endpointId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get a list of Endpoints"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointReadModelV1MethodResultList"
  /api/v1/endpoints/{endpointIdentifier}: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get a specific Endpoint"
      description: "Query an endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointReadModelV1MethodResult"
    put: 
      tags: 
      - "Endpoints"
      summary: "Update a specific Endpoint"
      description: "Update an endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EndpointUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EndpointUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EndpointUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/metrics/datatransfer: 
    get: 
      tags: 
      - "Endpoints"
      summary: "List data transfer for an Endpoint"
      description: "Get data for an endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      - name: "timewindow"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "360"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/DataTransferMetricReadModelV1IEnumerableMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/DataTransferMetricReadModelV1IEnumerableMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/DataTransferMetricReadModelV1IEnumerableMethodResult"
  /api/v1/endpoints/activate: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Activate an Endpoint"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/ActivateSimModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/ActivateSimModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/ActivateSimModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/configureendpointaddress: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Allocate an IP address to an endpoint"
      description: "Allocate to an endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/IpAddressAllocateReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/IpAddressAllocateReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/IpAddressAllocateReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/events: 
    get: 
      tags: 
      - "Endpoints"
      summary: "List events for an Endpoint"
      description: "List events for an endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "from"
        in: "query"
        schema: 
          type: "string"
      - name: "to"
        in: "query"
        schema: 
          type: "string"
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "0"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "0"
      - name: "sortOrder"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "1"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventOutInternalModelV1IEnumerableMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventOutInternalModelV1IEnumerableMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventOutInternalModelV1IEnumerableMethodResult"
  /api/v1/endpoints/{endpointIdentifier}/servingnetwork: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get the Carrier Network an Endpoint is attached to"
      description: "Get network with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointServingNetworkReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointServingNetworkReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointServingNetworkReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/accesstechnology: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get the Radio Access Technology (2G/3G/4G/5G) an Endpoint is attached to"
      description: "Get the endpoint RAT with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/imei: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get the IMEI of the device using an Endpoint"
      description: "Get the endpoint IMEI with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/location: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get Country, Carrier Network and Cell ID that an Endpoint is located in"
      description: "Get the endpoint location with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointLocationReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointLocationReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointLocationReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/status: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get the time-stamp the Endpoint was last seen and the status of the Endpoint"
      description: "Get the endpoint status with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointStatusReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointStatusReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointStatusReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/ipaddress: 
    get: 
      tags: 
      - "Endpoints"
      summary: "Get the IP address of an Endpoint"
      description: "Get the endpoint IP with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EndpointIpAddressReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EndpointIpAddressReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EndpointIpAddressReadModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/keyvalues: 
    get: 
      tags: 
      - "Endpoints"
      summary: "List the Edge Key/Values for an Endpoint"
      description: "Get the endpoint edge values with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/KeyValueReadModelIEnumerableMethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/KeyValueReadModelIEnumerableMethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/KeyValueReadModelIEnumerableMethodResultList"
  /api/v1/endpoints/{endpointIdentifier}/keyvalues/{key}: 
    delete: 
      tags: 
      - "Endpoints"
      summary: "Remove an Edge Key/Value for an Endpoint"
      description: "Remove endpoint edge values with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "key"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
    put: 
      tags: 
      - "Endpoints"
      summary: "Update an Edge Key/Value for an Endpoint"
      description: "Update endpoint edge values with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "tenant"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "key"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/KeyValueWriteModel"
          text/json: 
            schema: 
              $ref: "#/components/schemas/KeyValueWriteModel"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/KeyValueWriteModel"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/sms: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Send an SMS (Mobile Terminated) to the Endpoint"
      description: "Send endpoint an SMS with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OutboundSMSModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OutboundSMSModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OutboundSMSModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OutboundSMSResponseModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OutboundSMSResponseModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OutboundSMSResponseModelV1MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/suspend: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Suspend a specific Endpoint"
      description: "Suspend a endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/resume: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Resume a specific Endpoint"
      description: "Resume a endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/terminate: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Terminate a specific Endpoint"
      description: "Terminate a endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/endpoints/{endpointIdentifier}/reset: 
    post: 
      tags: 
      - "Endpoints"
      summary: "Reset a specific Endpoint"
      description: "Reset a endpoint with an endpoint id, ICCID or endpoint reference"
      parameters: 
      - name: "endpointIdentifier"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "forceDetach"
        in: "query"
        schema: 
          type: "boolean"
          default: "false"
      - name: "endDataSession"
        in: "query"
        schema: 
          type: "boolean"
          default: "true"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/eventendpoints: 
    get: 
      tags: 
      - "Event Endpoints"
      summary: "List the Event Endpoint(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResultList"
      deprecated: "true"
    post: 
      tags: 
      - "Event Endpoints"
      summary: "Create a new Event Endpoint"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
      deprecated: "true"
  /api/v1/eventendpoints/{idOrMoniker}: 
    get: 
      tags: 
      - "Event Endpoints"
      summary: "Get an Event Endpoint"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResult"
      deprecated: "true"
    put: 
      tags: 
      - "Event Endpoints"
      summary: "Update an existing Event Endpoint"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
      deprecated: "true"
    delete: 
      tags: 
      - "Event Endpoints"
      summary: "Delete an Event Endpoint"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
      deprecated: "true"
  /api/v1/eventhandlers: 
    get: 
      tags: 
      - "Event Handlers"
      summary: "List the Event Handler(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResultList"
    post: 
      tags: 
      - "Event Handlers"
      summary: "Create a new Event Handler"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/eventhandlers/{idOrMoniker}: 
    get: 
      tags: 
      - "Event Handlers"
      summary: "Get an Event Handler"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventHandlerReadModelV1MethodResult"
    put: 
      tags: 
      - "Event Handlers"
      summary: "Update an existing Event Handler"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EventHandlerUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Event Handlers"
      summary: "Delete an Event Handler"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/eventmaps: 
    get: 
      tags: 
      - "Event Maps"
      summary: "List the Event Map(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventMapReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventMapReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventMapReadModelV1MethodResultList"
    post: 
      tags: 
      - "Event Maps"
      summary: "Create a new Event Map"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EventMapUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EventMapUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EventMapUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/eventmaps/{idOrMoniker}: 
    get: 
      tags: 
      - "Event Maps"
      summary: "Get an Event Map"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventMapReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventMapReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventMapReadModelV1MethodResult"
    put: 
      tags: 
      - "Event Maps"
      summary: "Update an existing Event Map"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/EventMapUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/EventMapUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/EventMapUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Event Maps"
      summary: "Delete an Event Map"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/eventmaps/{idOrMoniker}/subscriptions: 
    get: 
      tags: 
      - "Event Maps"
      summary: "List subscribed events for an Event Map"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1ListMethodResult"
    post: 
      tags: 
      - "Event Maps"
      summary: "Subscribe to an event for an Event Map"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/EventSubscriptionsUpsertV1"
          text/json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/EventSubscriptionsUpsertV1"
          application/*+json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/EventSubscriptionsUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1ListMethodResult"
  /api/v1/eventsubscriptions: 
    get: 
      tags: 
      - "Event Subscriptions"
      summary: "List Event Subscription(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1MethodResultList"
  /api/v1/eventsubscriptions/{idOrMoniker}: 
    get: 
      tags: 
      - "Event Subscriptions"
      summary: "Get details of an Event Subscription"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventSubscriptionReadModelV1MethodResult"
    delete: 
      tags: 
      - "Event Subscriptions"
      summary: "Remove an Event Subscription"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/events: 
    get: 
      tags: 
      - "Events"
      summary: "List all events on the account"
      description: ""
      parameters: 
      - name: "from"
        in: "query"
        schema: 
          type: "string"
      - name: "to"
        in: "query"
        schema: 
          type: "string"
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "0"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "0"
      - name: "sortOrder"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "1"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventOutInternalModelV1IEnumerableMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventOutInternalModelV1IEnumerableMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventOutInternalModelV1IEnumerableMethodResult"
  /api/v1/lookups/DnsModes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the DNS Modes"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/IpAllocationTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the IP Allocation Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/IpAddressFamilies: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the IP Address Families"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/EventEndpointTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Event Endpoint Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/EventTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Event Types"
      description: ""
      parameters: 
      - name: "scope"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EventTypeLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EventTypeLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EventTypeLookupModelV1ListMethodResult"
  /api/v1/lookups/TraceSessionStatus: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Trace Session Statuses"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/RateLimits: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Rate Limits"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RateLimitLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RateLimitLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RateLimitLookupModelV1ListMethodResult"
  /api/v1/lookups/RoutingTargetTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Routing Target Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/RoutingPolicyStatus: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Routing Policy Status"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/BundleStatus: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Bundle Statuses"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/BundleScopes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Bundle Scopes"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/BundleElementServiceTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Bundle Element Service Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/DateDurationUnits: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Date Durations Units"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/EventScopes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Event Scopes"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/CustomerRoles: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Customer Roles"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/Countries: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Countries"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/CountryLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/CountryLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/CountryLookupModelV1ListMethodResult"
  /api/v1/lookups/ChargingTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Charging Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/NetworkOperators: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Network Operators"
      description: ""
      parameters: 
      - name: "iso3"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/NetworkOperatorLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/NetworkOperatorLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/NetworkOperatorLookupModelV1ListMethodResult"
  /api/v1/lookups/RoutingRedundancyZones: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Routing Redundancy Zones"
      description: ""
      parameters: 
      - name: "regionalGatewayMoniker"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingRedundancyZoneReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingRedundancyZoneReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingRedundancyZoneReadModelV1ListMethodResult"
  /api/v1/lookups/TransportProtocols: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Transport Protocols"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TransportProtocolLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TransportProtocolLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TransportProtocolLookupModelV1ListMethodResult"
  /api/v1/lookups/VpnIkeOptions: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN IKE Options"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/VpnEspOptions: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN ESP Options"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/VpnKeyExchangeTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN Key Exchange Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/VpnEncryptionAlgorithms: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN Encryption Algorithm Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/VpnEncryptionAlgorithmLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/VpnEncryptionAlgorithmLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/VpnEncryptionAlgorithmLookupModelV1ListMethodResult"
  /api/v1/lookups/VpnAuthenticationAlgorithms: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN Authentication Algorithm Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/VpnAuthenticationAlgorithmLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/VpnAuthenticationAlgorithmLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/VpnAuthenticationAlgorithmLookupModelV1ListMethodResult"
  /api/v1/lookups/VpnDiffieHellmanGroups: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN Diffie Hellman Groups"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/VpnPrfAlgorithms: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the VPN PRF Algorithms"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/EdgeServiceTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Edge Service Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/EdgeServiceTypeLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/EdgeServiceTypeLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/EdgeServiceTypeLookupModelV1ListMethodResult"
  /api/v1/lookups/TariffElements: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Tariff Elements"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TariffElementListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TariffElementListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TariffElementListMethodResult"
  /api/v1/lookups/Currencies: 
    get: 
      tags: 
      - "Lookups"
      summary: "List available currencies"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/CurrencyLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/CurrencyLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/CurrencyLookupModelV1ListMethodResult"
  /api/v1/lookups/UsageExportTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Usage Export Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/UsageReportingTypes: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Usage Reporting Types"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/lookups/UsageReportingStatuses: 
    get: 
      tags: 
      - "Lookups"
      summary: "List the Usage Reporting Statuses"
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/Int16LookupModelListMethodResult"
  /api/v1/metrics/datatransfer: 
    get: 
      tags: 
      - "Metrics"
      summary: "List details of Data Transferred"
      description: ""
      parameters: 
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      - name: "timewindow"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "360"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/DataTransferMetricReadModelV1IEnumerableMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/DataTransferMetricReadModelV1IEnumerableMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/DataTransferMetricReadModelV1IEnumerableMethodResult"
  /api/v1/operatorpolicies: 
    get: 
      tags: 
      - "Operator Policies"
      summary: "List Operator Policy(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResultList"
    post: 
      tags: 
      - "Operator Policies"
      summary: "Create a new Operator Policy"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/operatorpolicies/{idOrMoniker}: 
    get: 
      tags: 
      - "Operator Policies"
      summary: "Get a specific Operator Policy"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResult"
    put: 
      tags: 
      - "Operator Policies"
      summary: "Update a specific Operator Policy"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Operator Policies"
      summary: "Delete a specific Operator Policy"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/operatorpolicies/{operatorPolicyIdOrMoniker}/entries: 
    get: 
      tags: 
      - "Operator Policies"
      summary: "List the entries of a specific Operator Policy"
      description: ""
      parameters: 
      - name: "operatorPolicyIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "iso3"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
    post: 
      tags: 
      - "Operator Policies"
      summary: "Add an item to a specific Operator Policy"
      description: ""
      parameters: 
      - name: "operatorPolicyIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/OperatorPolicyEntryUpsertV1"
          text/json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/OperatorPolicyEntryUpsertV1"
          application/*+json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/OperatorPolicyEntryUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/operatorpolicies/{operatorPolicyIdOrMoniker}/rat: 
    post: 
      tags: 
      - "Operator Policies"
      summary: "Update the Radio Access Technology of a specific Operator Policy"
      description: ""
      parameters: 
      - name: "operatorPolicyIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyRatUpdateV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyRatUpdateV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyRatUpdateV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/packettrace/pcap: 
    get: 
      tags: 
      - "Packet Traces"
      summary: "List Packet Capture(s)"
      description: ""
      parameters: 
      - name: "since"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "until"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "filterInput"
        in: "query"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
  /api/v1/packettrace/packets: 
    get: 
      tags: 
      - "Packet Traces"
      summary: "Get packet(s) of a Packet Capture"
      description: ""
      parameters: 
      - name: "since"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "until"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      - name: "packetFilter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/PacketTracePacketModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/PacketTracePacketModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/PacketTracePacketModelV1MethodResultList"
  /api/v1/radiusservers: 
    get: 
      tags: 
      - "Radius Server"
      summary: "List RADIUS Server(s)"
      description: "List RADIUS Server(s)"
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RadiusServerReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RadiusServerReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RadiusServerReadModelV1MethodResultList"
    post: 
      tags: 
      - "Radius Server"
      summary: "Create a new RADIUS Server"
      description: "Create a new RADIUS Server"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/radiusservers/{idOrMoniker}: 
    get: 
      tags: 
      - "Radius Server"
      summary: "Get a specific RADIUS Server"
      description: "Get a specific RADIUS Server"
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RadiusServerReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RadiusServerReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RadiusServerReadModelV1MethodResult"
    put: 
      tags: 
      - "Radius Server"
      summary: "Update an existing RADIUS Server"
      description: "Update an existing RADIUS Server"
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
    delete: 
      tags: 
      - "Radius Server"
      summary: "Delete a RADIUS Server"
      description: "Delete a RADIUS Server"
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/regionalpolicies/gateways: 
    get: 
      tags: 
      - "Regional Gateways"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayLookupModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayLookupModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayLookupModelV1ListMethodResult"
  /api/v1/regionalpolicies: 
    get: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      - name: "includeFixed"
        in: "query"
        schema: 
          type: "boolean"
          default: "false"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResultList"
    post: 
      tags: 
      - "Regional Gateways"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/regionalpolicies/{idOrMoniker}: 
    get: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResult"
    put: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1MethodResult"
  /api/v1/regionalpolicies/{regionalGatewayPolicyIdOrMoniker}/entries: 
    get: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "regionalGatewayPolicyIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "iso3"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
    post: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "regionalGatewayPolicyIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyEntryUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyEntryUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RegionalGatewayPolicyEntryUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
    delete: 
      tags: 
      - "Regional Gateways"
      parameters: 
      - name: "regionalGatewayPolicyIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "operatorId"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "iso3"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/routingpolicies: 
    get: 
      tags: 
      - "Routing Policies"
      summary: "List Routing Policies"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingPolicyReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingPolicyReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingPolicyReadModelV1MethodResultList"
    post: 
      tags: 
      - "Routing Policies"
      summary: "Create a new Routing Policy"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RoutingPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RoutingPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RoutingPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/routingpolicies/{idOrMoniker}: 
    get: 
      tags: 
      - "Routing Policies"
      summary: "Get a specific Routing Policy"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingPolicyReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingPolicyReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingPolicyReadModelV1MethodResult"
    put: 
      tags: 
      - "Routing Policies"
      summary: "Update a specific Routing Policy"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RoutingPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RoutingPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RoutingPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Routing Policies"
      summary: "Delete a specific Routing Policy"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/routingtargets: 
    get: 
      tags: 
      - "Routing Targets"
      summary: "List Routing Targets"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResultList"
    post: 
      tags: 
      - "Routing Targets"
      summary: "Create a Routing Target"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RoutingTargetUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RoutingTargetUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RoutingTargetUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/routingtargets/{idOrMoniker}: 
    get: 
      tags: 
      - "Routing Targets"
      summary: "Get a specific Routing Target"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetReadModelV1MethodResult"
    put: 
      tags: 
      - "Routing Targets"
      summary: "Update a specific Routing Target"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RoutingTargetUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RoutingTargetUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RoutingTargetUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "Routing Targets"
      summary: "Delete a specific Routing Target"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/routingtargets/RoutingTargetTypeInstance: 
    get: 
      tags: 
      - "Routing Targets"
      summary: "Get a specific Routing Target Type Instance"
      description: ""
      parameters: 
      - name: "routingRedundancyZoneMoniker"
        in: "query"
        schema: 
          type: "string"
      - name: "routingTargetTypeMoniker"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetTypeInstanceReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetTypeInstanceReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/RoutingTargetTypeInstanceReadModelV1MethodResult"
  /api/v1/signallingtraces/event/{eventId}/pcap: 
    get: 
      tags: 
      - "Signalling Traces"
      summary: "Get an event's specific Signalling Trace PCAP"
      description: ""
      parameters: 
      - name: "eventId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
  /api/v1/signallingtraces/event/{eventId}: 
    get: 
      tags: 
      - "Signalling Traces"
      summary: "Get an event's specific Signalling Traces"
      description: ""
      parameters: 
      - name: "eventId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/SignallingTracePacketModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/SignallingTracePacketModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/SignallingTracePacketModelV1MethodResultList"
  /api/v1/signallingtraces/endpoint/{endpointId}: 
    get: 
      tags: 
      - "Signalling Traces"
      summary: "Get packet(s) of a Signalling Trace for an endpoint"
      description: ""
      parameters: 
      - name: "endpointId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "from"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "to"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "0"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
          default: "0"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/SignallingTracePacketModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/SignallingTracePacketModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/SignallingTracePacketModelV1MethodResultList"
  /api/v1/signallingtraces/endpoint/{endpointId}/pcap: 
    get: 
      tags: 
      - "Signalling Traces"
      summary: "Get PCAP containing Signalling Tracing for an endpoint"
      description: ""
      parameters: 
      - name: "endpointId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "from"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "to"
        in: "query"
        schema: 
          type: "string"
          format: "date-time"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
          default: ""
      responses: 
        200: 
          description: "OK"
  /api/v1/steeringprofiles: 
    get: 
      tags: 
      - "Steering Profiles"
      summary: "List Steering Profile(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResultList"
      deprecated: "true"
    post: 
      tags: 
      - "Steering Profiles"
      summary: "Create a new Steering Profile"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
      deprecated: "true"
  /api/v1/steeringprofiles/{idOrMoniker}: 
    get: 
      tags: 
      - "Steering Profiles"
      summary: "Get a specific Steering Profile"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyReadModelV1MethodResult"
      deprecated: "true"
    put: 
      tags: 
      - "Steering Profiles"
      summary: "Update a specific Steering Profile"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
      deprecated: "true"
    delete: 
      tags: 
      - "Steering Profiles"
      summary: "Delete a specific Steering Profile"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
      deprecated: "true"
  /api/v1/steeringprofiles/{steeringProfileIdOrMoniker}/entries: 
    get: 
      tags: 
      - "Steering Profiles"
      summary: "List the entries of a specific Steering Profile"
      description: ""
      parameters: 
      - name: "steeringProfileIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "iso3"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1ListMethodResult"
      deprecated: "true"
    post: 
      tags: 
      - "Steering Profiles"
      summary: "Add an item to a specific Steering Profile"
      description: ""
      parameters: 
      - name: "steeringProfileIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/OperatorPolicyEntryUpsertV1"
          text/json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/OperatorPolicyEntryUpsertV1"
          application/*+json: 
            schema: 
              type: "array"
              items: 
                $ref: "#/components/schemas/OperatorPolicyEntryUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
      deprecated: "true"
  /api/v1/steeringprofiles/{steeringProfileIdOrMoniker}/rat: 
    post: 
      tags: 
      - "Steering Profiles"
      summary: "Update the Radio Access Technology of a specific Steering Profile"
      description: ""
      parameters: 
      - name: "steeringProfileIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyRatUpdateV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyRatUpdateV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/OperatorPolicyRatUpdateV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
      deprecated: "true"
  /api/v1/tariff/entries: 
    get: 
      tags: 
      - "Tariffs"
      summary: "Get the Tariff Entries"
      description: ""
      parameters: 
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TariffEntryReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TariffEntryReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TariffEntryReadModelV1MethodResultList"
  /api/v1/tariff/zones: 
    get: 
      tags: 
      - "Tariffs"
      summary: "Get the Tariff Zones Entries"
      description: ""
      parameters: 
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "hostNetworkOperatorId"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TariffZoneSchemeModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TariffZoneSchemeModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TariffZoneSchemeModelV1MethodResult"
  /api/v1/themes: 
    get: 
      tags: 
      - "Themes"
      summary: "Retrieve a list of themes"
      description: "Gets a list of themes available to the customer"
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/ThemeReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/ThemeReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/ThemeReadModelV1MethodResultList"
  /api/v1/themes/{themeId}: 
    get: 
      tags: 
      - "Themes"
      summary: "Gets a theme given its id"
      description: "Gets a theme"
      parameters: 
      - name: "themeId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/ThemeReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/ThemeReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/ThemeReadModelV1MethodResult"
    put: 
      tags: 
      - "Themes"
      summary: "Updates a theme"
      description: "Updates a theme"
      parameters: 
      - name: "themeId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/ThemeUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/ThemeUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/ThemeUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/tracesessions: 
    get: 
      tags: 
      - "Trace Sessions"
      summary: "List Trace Session(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TraceSessionReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TraceSessionReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TraceSessionReadModelV1MethodResultList"
    post: 
      tags: 
      - "Trace Sessions"
      summary: "Start a Trace Session for an Endpoint"
      description: ""
      parameters: 
      - name: "tenant"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/TraceSessionUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/TraceSessionUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/TraceSessionUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/tracesessions/{traceSessionId}: 
    get: 
      tags: 
      - "Trace Sessions"
      summary: "Get a specific Trace Session"
      description: ""
      parameters: 
      - name: "traceSessionId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TraceSessionReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TraceSessionReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TraceSessionReadModelV1MethodResult"
    put: 
      tags: 
      - "Trace Sessions"
      summary: "Update a Trace Session for an Endpoint"
      description: ""
      parameters: 
      - name: "tenant"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "customer"
        in: "query"
        schema: 
          type: "string"
          format: "uuid"
      - name: "traceSessionId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/TraceSessionUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/TraceSessionUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/TraceSessionUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/tracesessions/{id}: 
    delete: 
      tags: 
      - "Trace Sessions"
      summary: "Delete Trace Session"
      description: ""
      parameters: 
      - name: "id"
        in: "path"
        required: "true"
        schema: 
          type: "integer"
          format: "int32"
      responses: 
        200: 
          description: "OK"
  /api/v1/users: 
    get: 
      tags: 
      - "UsersControllerV1"
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResultList"
  /api/v1/users/{userProfileId}: 
    get: 
      tags: 
      - "UsersControllerV1"
      parameters: 
      - name: "userProfileId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResult"
  /api/v1/users/invites: 
    post: 
      tags: 
      - "UsersControllerV1"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/UserInviteModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/UserInviteModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/UserInviteModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
    get: 
      tags: 
      - "UsersControllerV1"
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/UserProfileReadModelV1MethodResultList"
  /api/v1/users/invites/{email}: 
    delete: 
      tags: 
      - "UsersControllerV1"
      parameters: 
      - name: "email"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/users/customers: 
    get: 
      tags: 
      - "UsersControllerV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/CustomerAssociationModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/CustomerAssociationModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/CustomerAssociationModelV1MethodResultList"
  /api/v1/vslices: 
    get: 
      tags: 
      - "VSlices"
      summary: "List VSlice(s)"
      description: ""
      parameters: 
      - name: "offset"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "limit"
        in: "query"
        schema: 
          type: "integer"
          format: "int32"
      - name: "sortBy"
        in: "query"
        schema: 
          type: "string"
      - name: "filter"
        in: "query"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/VsliceReadModelV1MethodResultList"
            application/json: 
              schema: 
                $ref: "#/components/schemas/VsliceReadModelV1MethodResultList"
            text/json: 
              schema: 
                $ref: "#/components/schemas/VsliceReadModelV1MethodResultList"
    post: 
      tags: 
      - "VSlices"
      summary: "Create a new VSlice"
      description: ""
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/VsliceUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/VsliceUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/VsliceUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/GuidMethodResult"
  /api/v1/vslices/{idOrMoniker}: 
    get: 
      tags: 
      - "VSlices"
      summary: "Get a specific VSlice"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/VsliceReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/VsliceReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/VsliceReadModelV1MethodResult"
    put: 
      tags: 
      - "VSlices"
      summary: "Update a specific VSlice"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/VsliceUpsertModelV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/VsliceUpsertModelV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/VsliceUpsertModelV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
    delete: 
      tags: 
      - "VSlices"
      summary: "Delete a VSlice"
      description: ""
      parameters: 
      - name: "idOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResultString"
  /api/v1/vslices/{vsliceIdOrMoniker}/subnets: 
    get: 
      tags: 
      - "VSlices"
      summary: "List the IP sub-network(s) of a VSlice"
      description: ""
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
    post: 
      tags: 
      - "VSlices"
      summary: "Add an IP sub-network to a VSlice"
      description: ""
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/IpSubnetUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/IpSubnetUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/IpSubnetUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1MethodResult"
  /api/v1/vslices/{vsliceIdOrMoniker}/subnets/{ipSubnetId}: 
    put: 
      tags: 
      - "VSlices"
      summary: "Modify an IP sub-network on a VSlice"
      description: ""
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "ipSubnetId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/IpSubnetUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/IpSubnetUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/IpSubnetUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
    delete: 
      tags: 
      - "VSlices"
      summary: "Remove an IP sub-network from a VSlice"
      description: ""
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "ipSubnetId"
        in: "path"
        required: "true"
        schema: 
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/vslices/{vsliceIdOrMoniker}/radiusservers: 
    get: 
      tags: 
      - "VSlices"
      summary: "List the RADIUS Server(s) linked to a VSlice"
      description: "List the RADIUS Server(s) linked to a VSlice for IP Allocation Type of 'RADIUS'"
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
    post: 
      tags: 
      - "VSlices"
      summary: "Link a RADIUS Server(s) to a VSlice"
      description: "Link a RADIUS Server(s) to a VSlice"
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerVsliceUpsertV1"
          text/json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerVsliceUpsertV1"
          application/*+json: 
            schema: 
              $ref: "#/components/schemas/RadiusServerVsliceUpsertV1"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/MethodResult"
  /api/v1/vslices/{vsliceIdOrMoniker}/radiusservers/{radiusServerIdOrMoniker}: 
    delete: 
      tags: 
      - "VSlices"
      summary: "Unlink a RADIUS Server(s) from a VSlice"
      description: "Unlink a RADIUS Server(s) from a VSlice"
      parameters: 
      - name: "vsliceIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      - name: "radiusServerIdOrMoniker"
        in: "path"
        required: "true"
        schema: 
          type: "string"
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/IpSubnetReadModelV1ListMethodResult"
  /api/v1/vslices/apn-specification: 
    get: 
      tags: 
      - "VSlices"
      summary: "Returns the vSlice APN Specification, which is inherited from the Tenant hierarchy."
      description: ""
      responses: 
        200: 
          description: "OK"
          content: 
            text/plain: 
              schema: 
                $ref: "#/components/schemas/TenantApnSpecificationReadModelV1MethodResult"
            application/json: 
              schema: 
                $ref: "#/components/schemas/TenantApnSpecificationReadModelV1MethodResult"
            text/json: 
              schema: 
                $ref: "#/components/schemas/TenantApnSpecificationReadModelV1MethodResult"
components: 
  schemas: 
    ActivateSimModelV1: 
      type: "object"
      properties: 
        iccid: 
          type: "string"
          nullable: "true"
        activationCode: 
          type: "string"
          nullable: "true"
        defaultConfiguration: 
          type: "boolean"
      additionalProperties: "false"
    AddressModel: 
      type: "object"
      properties: 
        id: 
          type: "string"
          nullable: "true"
        firstName: 
          type: "string"
          nullable: "true"
        lastName: 
          type: "string"
          nullable: "true"
        email: 
          type: "string"
          nullable: "true"
        line1: 
          type: "string"
          nullable: "true"
        line2: 
          type: "string"
          nullable: "true"
        townCity: 
          type: "string"
          nullable: "true"
        countyRegion: 
          type: "string"
          nullable: "true"
        postcode: 
          type: "string"
          nullable: "true"
        countryIso3: 
          type: "string"
          nullable: "true"
        phoneNumber: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    ApiTokenReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        createdTime: 
          type: "string"
          nullable: "true"
        allowLogin: 
          type: "boolean"
      additionalProperties: "false"
    ApiTokenReadModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/ApiTokenReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    ApiTokenReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/ApiTokenReadModelV1"
      additionalProperties: "false"
    ApiTokenUpsertV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        allowLogin: 
          type: "boolean"
      additionalProperties: "false"
    AssociationType: 
      enum: 
      - "1"
      - "2"
      type: "integer"
      format: "int32"
    AuditReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        timestamp: 
          type: "string"
          format: "date-time"
        userProfileId: 
          type: "string"
          format: "uuid"
        username: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        contextJson: 
          nullable: "true"
        severity: 
          $ref: "#/components/schemas/Int16ILookupModel"
        auditType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        auditObject: 
          $ref: "#/components/schemas/Int16ILookupModel"
        identifier: 
          type: "string"
          format: "uuid"
        correlationId: 
          type: "string"
          format: "uuid"
        remoteIpAddress: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    AuditReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/AuditReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    AuthorizationsReadModelV1: 
      type: "object"
      properties: 
        defaultCustomerId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        defaultTenantId: 
          type: "string"
          format: "uuid"
        defaultTenantName: 
          type: "string"
          nullable: "true"
        roles: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        customerIsActive: 
          type: "boolean"
      additionalProperties: "false"
    AuthorizationsReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/AuthorizationsReadModelV1"
      additionalProperties: "false"
    ConfigurationData: 
      type: "object"
      properties: 
        wireGuardConfig: 
          $ref: "#/components/schemas/RoutingTargetWireguard"
        vpnConfig: 
          $ref: "#/components/schemas/RoutingTargetVpn"
      additionalProperties: "false"
    Country: 
      type: "object"
      properties: 
        iso3: 
          type: "string"
          nullable: "true"
        iso2: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    CountryLookupModelV1: 
      type: "object"
      properties: 
        iso2: 
          type: "string"
          nullable: "true"
        iso3: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    CountryLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/CountryLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    Currency: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        code: 
          type: "integer"
          format: "int32"
        name: 
          maxLength: "100"
          minLength: "0"
          type: "string"
          nullable: "true"
        displayDecimalPlaces: 
          type: "integer"
          format: "int32"
        prefix: 
          maxLength: "10"
          minLength: "0"
          type: "string"
          nullable: "true"
        suffix: 
          maxLength: "10"
          minLength: "0"
          type: "string"
          nullable: "true"
        alphaCode: 
          maxLength: "3"
          minLength: "0"
          type: "string"
          nullable: "true"
        enabled: 
          type: "boolean"
        decimalSeparator: 
          maxLength: "1"
          type: "string"
          nullable: "true"
        unitSeparator: 
          maxLength: "1"
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    CurrencyLookupModelV1: 
      type: "object"
      properties: 
        code: 
          type: "integer"
          format: "int32"
        alphaCode: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        displayDecimalPlaces: 
          type: "integer"
          format: "int32"
        prefix: 
          type: "string"
          nullable: "true"
        suffix: 
          type: "string"
          nullable: "true"
        decimalSeparator: 
          type: "string"
          nullable: "true"
        unitSeparator: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    CurrencyLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/CurrencyLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    CustomerAddressViewModelV1: 
      type: "object"
      properties: 
        billingAddress: 
          $ref: "#/components/schemas/AddressModel"
        shippingAddress: 
          $ref: "#/components/schemas/AddressModel"
      additionalProperties: "false"
    CustomerAddressViewModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/CustomerAddressViewModelV1"
      additionalProperties: "false"
    CustomerAssociationModelV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        id: 
          type: "string"
          format: "uuid"
        moniker: 
          type: "string"
          nullable: "true"
        associationType: 
          $ref: "#/components/schemas/AssociationType"
        tenantId: 
          type: "string"
          format: "uuid"
        tenantName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    CustomerAssociationModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/CustomerAssociationModelV1"
          nullable: "true"
      additionalProperties: "false"
    CustomerReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        availableSubscriptionTypes: 
          type: "array"
          items: 
            $ref: "#/components/schemas/SubscriptionType"
          nullable: "true"
        ledgerAccountId: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        accountBalance: 
          type: "number"
          format: "double"
        formattedAccountBalance: 
          type: "string"
          nullable: "true"
        endpointCount: 
          type: "integer"
          format: "int32"
        createdTimestamp: 
          type: "string"
          format: "date-time"
        customerStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
      additionalProperties: "false"
    CustomerReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/CustomerReadModelV1"
      additionalProperties: "false"
    DataTransferMetricReadModelV1: 
      type: "object"
      properties: 
        timestamp: 
          type: "string"
          format: "date-time"
          nullable: "true"
        uplinkBytesAllowed: 
          type: "integer"
          format: "int64"
          nullable: "true"
        downlinkBytesAllowed: 
          type: "integer"
          format: "int64"
          nullable: "true"
        uplinkPacketsAllowed: 
          type: "integer"
          format: "int64"
          nullable: "true"
        downlinkPacketsAllowed: 
          type: "integer"
          format: "int64"
          nullable: "true"
        uplinkBytesBlocked: 
          type: "integer"
          format: "int64"
          nullable: "true"
        downlinkBytesBlocked: 
          type: "integer"
          format: "int64"
          nullable: "true"
        uplinkPacketsBlocked: 
          type: "integer"
          format: "int64"
          nullable: "true"
        downlinkPacketsBlocked: 
          type: "integer"
          format: "int64"
          nullable: "true"
        totalBytesAllowed: 
          type: "integer"
          format: "int64"
          nullable: "true"
        totalBytesBlocked: 
          type: "integer"
          format: "int64"
          nullable: "true"
        totalPacketsAllowed: 
          type: "integer"
          format: "int64"
          nullable: "true"
        totalPacketsBlocked: 
          type: "integer"
          format: "int64"
          nullable: "true"
      additionalProperties: "false"
    DataTransferMetricReadModelV1IEnumerableMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/DataTransferMetricReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EdgeServiceListModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        edgeServiceType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
      additionalProperties: "false"
    EdgeServiceListModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EdgeServiceListModelV1"
          nullable: "true"
      additionalProperties: "false"
    EdgeServiceTypeLookupModelV1: 
      type: "object"
      properties: 
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    EdgeServiceTypeLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EdgeServiceTypeLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    EdgeServiceUpsertV1: 
      required: 
      - "edgeServiceType"
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        edgeServiceType: 
          minLength: "1"
          type: "string"
        instanceConfiguration: 
          nullable: "true"
        vslice: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointAccessTechnologyReadModelV1: 
      type: "object"
      properties: 
        latestUpdate: 
          type: "string"
          format: "date-time"
          nullable: "true"
        accessTechnology: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointAccessTechnologyReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointAccessTechnologyReadModelV1"
      additionalProperties: "false"
    EndpointAddRemoveGroupV1: 
      type: "object"
      properties: 
        endpointIds: 
          type: "array"
          items: 
            type: "string"
            format: "uuid"
          nullable: "true"
      additionalProperties: "false"
    EndpointGroupReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        endpointsAssigned: 
          type: "integer"
          format: "int32"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
        subnetwork: 
          $ref: "#/components/schemas/SubnetworkReadModelV1"
        eventMap: 
          $ref: "#/components/schemas/IRelatedReadModel"
        routingPolicy: 
          $ref: "#/components/schemas/IRelatedReadModel"
        steeringProfile: 
          $ref: "#/components/schemas/IRelatedReadModel"
        regionalGatewayPolicy: 
          $ref: "#/components/schemas/IRelatedReadModel"
        ipAllocationType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        customerId: 
          type: "string"
          format: "uuid"
        subscriptionType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        usageRolling24H: 
          type: "integer"
          format: "int64"
        usageRolling7D: 
          type: "integer"
          format: "int64"
        usageRolling28D: 
          type: "integer"
          format: "int64"
        usageRolling1Y: 
          type: "integer"
          format: "int64"
        usageListHourly24H: 
          type: "string"
          nullable: "true"
        usageListDaily28D: 
          type: "string"
          nullable: "true"
        usageListMonthly12M: 
          type: "string"
          nullable: "true"
        chargeRolling24H: 
          type: "number"
          format: "double"
        chargeRolling7D: 
          type: "number"
          format: "double"
        chargeRolling28D: 
          type: "number"
          format: "double"
        chargeRolling1Y: 
          type: "number"
          format: "double"
        chargeListHourly24H: 
          type: "string"
          nullable: "true"
        chargeListDaily28D: 
          type: "string"
          nullable: "true"
        chargeListMonthly12M: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointGroupReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointGroupReadModelV1"
      additionalProperties: "false"
    EndpointGroupReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EndpointGroupReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EndpointGroupUpsertV1: 
      required: 
      - "moniker"
      - "name"
      type: "object"
      properties: 
        name: 
          minLength: "1"
          type: "string"
        moniker: 
          minLength: "1"
          type: "string"
        eventMap: 
          type: "string"
          nullable: "true"
        routingPolicy: 
          type: "string"
          nullable: "true"
        steeringProfile: 
          type: "string"
          nullable: "true"
        regionalGatewayPolicy: 
          type: "string"
          nullable: "true"
        ipSubnetworkId: 
          type: "string"
          nullable: "true"
        vslice: 
          type: "string"
          nullable: "true"
        subscriptionType: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointHttpAddressV1: 
      type: "object"
      properties: 
        url: 
          type: "string"
          nullable: "true"
        port: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    EndpointIdentityReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        endpointId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        iccid: 
          type: "string"
          nullable: "true"
        imsi: 
          type: "string"
          nullable: "true"
        msisdn: 
          type: "string"
          nullable: "true"
        hostNetworkOperator: 
          type: "string"
          nullable: "true"
        isActive: 
          type: "boolean"
      additionalProperties: "false"
    EndpointIpAddressReadModelV1: 
      type: "object"
      properties: 
        vSlice: 
          type: "string"
          nullable: "true"
        addressFamily: 
          type: "string"
          nullable: "true"
        address: 
          type: "string"
          nullable: "true"
        assigned: 
          type: "string"
          format: "date-time"
          nullable: "true"
        status: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointIpAddressReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointIpAddressReadModelV1"
      additionalProperties: "false"
    EndpointLocationReadModelV1: 
      type: "object"
      properties: 
        latestUpdate: 
          type: "string"
          format: "date-time"
          nullable: "true"
        accessTechnology: 
          type: "string"
          nullable: "true"
        latestCountry: 
          $ref: "#/components/schemas/Country"
        latestOperator: 
          $ref: "#/components/schemas/NetworkOperator"
        latestLocation: 
          $ref: "#/components/schemas/Location"
      additionalProperties: "false"
    EndpointLocationReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointLocationReadModelV1"
      additionalProperties: "false"
    EndpointReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        subscriptionType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        reference: 
          type: "string"
          nullable: "true"
        imsi: 
          type: "string"
          nullable: "true"
        activeImsi: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        iccid: 
          type: "string"
          nullable: "true"
        msisdn: 
          type: "string"
          nullable: "true"
        activeMsisdn: 
          type: "string"
          nullable: "true"
        firstActivity: 
          type: "string"
          format: "date-time"
          nullable: "true"
        latestActivity: 
          type: "string"
          format: "date-time"
          nullable: "true"
        endpointGroupId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        endpointGroupName: 
          type: "string"
          nullable: "true"
        routingPolicyId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        routingPolicyName: 
          type: "string"
          nullable: "true"
        steeringProfileId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        steeringProfileName: 
          type: "string"
          nullable: "true"
        vSliceId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        vSliceName: 
          type: "string"
          nullable: "true"
        vSliceMoniker: 
          type: "string"
          nullable: "true"
        eventMapId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        eventMapName: 
          type: "string"
          nullable: "true"
        regionalGatewayPolicyId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        regionalGatewayPolicyName: 
          type: "string"
          nullable: "true"
        endpointStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
        endpointNetworkStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
        endpointType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        latestRatType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        latestServingOperatorDescription: 
          type: "string"
          nullable: "true"
        latestCountryIso3: 
          type: "string"
          nullable: "true"
        latestCountryIso2: 
          type: "string"
          nullable: "true"
        latestCountryName: 
          type: "string"
          nullable: "true"
        latestImei: 
          type: "string"
          nullable: "true"
        lockedImei: 
          type: "string"
          nullable: "true"
        ipAddress: 
          type: "string"
          nullable: "true"
        tags: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        traceLimit: 
          type: "string"
          format: "date-time"
          nullable: "true"
        latestLon: 
          type: "number"
          format: "double"
          nullable: "true"
        latestLat: 
          type: "number"
          format: "double"
          nullable: "true"
        epid: 
          type: "string"
          nullable: "true"
        eid: 
          type: "string"
          nullable: "true"
        endpointHttpAddress: 
          type: "string"
          nullable: "true"
          deprecated: "true"
        endpointHttpAddresses: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EndpointHttpAddressV1"
          nullable: "true"
        latestRegionalGateway: 
          type: "string"
          nullable: "true"
        identities: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EndpointIdentityReadModelV1"
          nullable: "true"
        customer: 
          $ref: "#/components/schemas/IRelatedReadModel"
        tenant: 
          $ref: "#/components/schemas/IRelatedReadModel"
        activationCode: 
          type: "string"
          nullable: "true"
        lpaString: 
          type: "string"
          nullable: "true"
        usageRolling24H: 
          type: "integer"
          format: "int64"
        usageRolling7D: 
          type: "integer"
          format: "int64"
        usageRolling28D: 
          type: "integer"
          format: "int64"
        usageRolling1Y: 
          type: "integer"
          format: "int64"
        usageListHourly24H: 
          type: "string"
          nullable: "true"
        usageListDaily28D: 
          type: "string"
          nullable: "true"
        usageListMonthly12M: 
          type: "string"
          nullable: "true"
        chargeRolling24H: 
          type: "number"
          format: "double"
        chargeRolling7D: 
          type: "number"
          format: "double"
        chargeRolling28D: 
          type: "number"
          format: "double"
        chargeRolling1Y: 
          type: "number"
          format: "double"
        chargeListHourly24H: 
          type: "string"
          nullable: "true"
        chargeListDaily28D: 
          type: "string"
          nullable: "true"
        chargeListMonthly12M: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointReadModelV1"
      additionalProperties: "false"
    EndpointReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EndpointReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EndpointServingNetworkReadModelV1: 
      type: "object"
      properties: 
        latestUpdate: 
          type: "string"
          format: "date-time"
          nullable: "true"
        mcc: 
          type: "string"
          nullable: "true"
        mnc: 
          type: "string"
          nullable: "true"
        operatorName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointServingNetworkReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointServingNetworkReadModelV1"
      additionalProperties: "false"
    EndpointStatusReadModelV1: 
      type: "object"
      properties: 
        latestActivity: 
          type: "string"
          format: "date-time"
          nullable: "true"
        provisionStatus: 
          type: "string"
          nullable: "true"
        networkStatus: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointStatusReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EndpointStatusReadModelV1"
      additionalProperties: "false"
    EndpointSummaryReadModel: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        reference: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EndpointUpsertV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        reference: 
          type: "string"
          nullable: "true"
        ipAddress: 
          type: "string"
          nullable: "true"
        tags: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventHandlerConfiguration: 
      type: "object"
      properties: 
        webhookConfig: 
          $ref: "#/components/schemas/EventHandlerWebhook"
      additionalProperties: "false"
    EventHandlerReadModel: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        type: 
          type: "string"
          nullable: "true"
        summaryDescription: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventHandlerReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        configurationData: 
          $ref: "#/components/schemas/EventHandlerConfiguration"
        summaryDescription: 
          type: "string"
          nullable: "true"
        eventEndpointType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
      additionalProperties: "false"
    EventHandlerReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EventHandlerReadModelV1"
      additionalProperties: "false"
    EventHandlerReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EventHandlerReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EventHandlerUpsertV1: 
      required: 
      - "eventEndpointType"
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        configurationData: 
          $ref: "#/components/schemas/EventHandlerConfiguration"
        eventEndpointType: 
          minLength: "1"
          type: "string"
        vslice: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventHandlerWebhook: 
      type: "object"
      properties: 
        bearerToken: 
          type: "string"
          nullable: "true"
        username: 
          type: "string"
          nullable: "true"
        password: 
          type: "string"
          nullable: "true"
        timeout: 
          type: "string"
          nullable: "true"
        url: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventMapReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        eventScope: 
          $ref: "#/components/schemas/Int16ILookupModel"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
      additionalProperties: "false"
    EventMapReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EventMapReadModelV1"
      additionalProperties: "false"
    EventMapReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EventMapReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EventMapUpsertV1: 
      required: 
      - "eventScope"
      - "name"
      type: "object"
      properties: 
        name: 
          minLength: "1"
          type: "string"
        moniker: 
          type: "string"
          nullable: "true"
        eventScope: 
          minLength: "1"
          type: "string"
        vslice: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventOutInternalModelV1: 
      type: "object"
      properties: 
        unixEpochTimestamp: 
          type: "integer"
          format: "int64"
        timestamp: 
          type: "string"
          format: "date-time"
        eventType: 
          type: "string"
          nullable: "true"
        eventId: 
          type: "string"
          nullable: "true"
        endpointId: 
          type: "string"
          nullable: "true"
        endpointDescription: 
          type: "string"
          nullable: "true"
        endpointGroupId: 
          type: "string"
          nullable: "true"
        endpointGroupDescription: 
          type: "string"
          nullable: "true"
        tenantId: 
          type: "string"
          nullable: "true"
        customerId: 
          type: "string"
          nullable: "true"
        vSliceId: 
          type: "string"
          nullable: "true"
        vSliceDescription: 
          type: "string"
          nullable: "true"
        narrative: 
          type: "string"
          nullable: "true"
        sanitizedBody: 
          nullable: "true"
        routingTargetId: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventOutInternalModelV1IEnumerableMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EventOutInternalModelV1"
          nullable: "true"
      additionalProperties: "false"
    EventSubscriptionReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        eventMap: 
          $ref: "#/components/schemas/IRelatedReadModel"
        eventEndpoint: 
          $ref: "#/components/schemas/EventHandlerReadModel"
        eventType: 
          $ref: "#/components/schemas/Int16ILookupModel"
      additionalProperties: "false"
    EventSubscriptionReadModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EventSubscriptionReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EventSubscriptionReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/EventSubscriptionReadModelV1"
      additionalProperties: "false"
    EventSubscriptionReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EventSubscriptionReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    EventSubscriptionsUpsertV1: 
      type: "object"
      properties: 
        eventEndpointId: 
          type: "string"
          format: "uuid"
        eventTypeId: 
          type: "integer"
          format: "int32"
        tag: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    EventTypeLookupModelV1: 
      type: "object"
      properties: 
        key: 
          type: "integer"
          format: "int32"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
        subscriptionTypes: 
          type: "array"
          items: 
            $ref: "#/components/schemas/Int16ILookupModel"
          nullable: "true"
      additionalProperties: "false"
    EventTypeLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/EventTypeLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    GuidMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "string"
          format: "uuid"
      additionalProperties: "false"
    IRelatedReadModel: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    Int16ILookupModel: 
      type: "object"
      properties: 
        key: 
          type: "integer"
          format: "int32"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    Int16LookupModel: 
      type: "object"
      properties: 
        key: 
          type: "integer"
          format: "int32"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    Int16LookupModelListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/Int16LookupModel"
          nullable: "true"
      additionalProperties: "false"
    Int32ArrayMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            type: "integer"
            format: "int32"
          nullable: "true"
      additionalProperties: "false"
    IpAddressAllocateReadModelV1: 
      type: "object"
      properties: 
        ipAddressInstanceId: 
          type: "string"
          format: "uuid"
        address: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    IpAddressAllocateReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/IpAddressAllocateReadModelV1"
      additionalProperties: "false"
    IpSubnetReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        subnetAddress: 
          type: "string"
          nullable: "true"
        vsliceId: 
          type: "string"
          format: "uuid"
        ipAllocationType: 
          $ref: "#/components/schemas/Int16ILookupModel"
      additionalProperties: "false"
    IpSubnetReadModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/IpSubnetReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    IpSubnetReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/IpSubnetReadModelV1"
      additionalProperties: "false"
    IpSubnetUpsertV1: 
      type: "object"
      properties: 
        subnetAddress: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    KeyValueReadModel: 
      type: "object"
      properties: 
        key: 
          type: "string"
          nullable: "true"
        value: 
          type: "string"
          nullable: "true"
        contentType: 
          type: "string"
          nullable: "true"
        updated: 
          type: "string"
          format: "date-time"
      additionalProperties: "false"
    KeyValueReadModelIEnumerableMethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            type: "array"
            items: 
              $ref: "#/components/schemas/KeyValueReadModel"
          nullable: "true"
      additionalProperties: "false"
    KeyValueWriteModel: 
      type: "object"
      properties: 
        value: 
          type: "string"
          nullable: "true"
        contentType: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    LedgerAccountReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        currencyCode: 
          type: "string"
          nullable: "true"
        balance: 
          type: "number"
          format: "double"
        formattedBalance: 
          type: "string"
          nullable: "true"
        availableBalance: 
          type: "number"
          format: "double"
        formattedAvailableBalance: 
          type: "string"
          nullable: "true"
        limit: 
          type: "number"
          format: "double"
        formattedLimit: 
          type: "string"
          nullable: "true"
        warningThreshold: 
          type: "number"
          format: "double"
          nullable: "true"
        formattedWarningThreshold: 
          type: "string"
          nullable: "true"
        activeReservationTotal: 
          type: "number"
          format: "double"
        formattedActiveReservationTotal: 
          type: "string"
          nullable: "true"
        lastUpdate: 
          type: "string"
          format: "date-time"
        defaultCustomerTariffId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        defaultCustomerTariffDescription: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    LedgerAccountReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/LedgerAccountReadModelV1"
      additionalProperties: "false"
    LedgerTransactionReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int64"
        transactionTime: 
          type: "string"
          format: "date-time"
        amount: 
          type: "number"
          format: "double"
        formattedAmount: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        subtransactionCount: 
          type: "integer"
          format: "int32"
        ledgerTransactionStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
        ledgerTransactionType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        iccid: 
          type: "string"
          nullable: "true"
        endpointId: 
          type: "string"
          format: "uuid"
      additionalProperties: "false"
    LedgerTransactionReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/LedgerTransactionReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    Location: 
      type: "object"
      properties: 
        cellIdentifier: 
          type: "string"
          nullable: "true"
        trackingAreaCode: 
          type: "string"
          nullable: "true"
        serviceAreaCode: 
          type: "string"
          nullable: "true"
        locationAreaCode: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
      additionalProperties: "false"
    MethodResultString: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    MobileNetworkLookupModelV1: 
      type: "object"
      properties: 
        mcc: 
          type: "string"
          nullable: "true"
        mnc: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    NetworkOperator: 
      type: "object"
      properties: 
        mcc: 
          type: "string"
          nullable: "true"
        mnc: 
          type: "string"
          nullable: "true"
        operatorName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    NetworkOperatorLookupModelV1: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        mcc: 
          type: "string"
          nullable: "true"
          deprecated: "true"
        mnc: 
          type: "string"
          nullable: "true"
          deprecated: "true"
        mobileNetworks: 
          type: "array"
          items: 
            $ref: "#/components/schemas/MobileNetworkLookupModelV1"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        tadig: 
          type: "string"
          nullable: "true"
        iso3: 
          type: "string"
          nullable: "true"
        enabled: 
          type: "boolean"
      additionalProperties: "false"
    NetworkOperatorLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/NetworkOperatorLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    OperatorPolicyEntryReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        operatorId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        iso3: 
          type: "string"
          nullable: "true"
        steeringProfileEntryAction: 
          $ref: "#/components/schemas/Int16ILookupModel"
      additionalProperties: "false"
    OperatorPolicyEntryReadModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/OperatorPolicyEntryReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    OperatorPolicyEntryUpsertV1: 
      type: "object"
      properties: 
        operatorTadig: 
          type: "string"
          nullable: "true"
        operatorId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        iso3: 
          type: "string"
          nullable: "true"
        steeringProfileEntryAction: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    OperatorPolicyRatUpdateV1: 
      type: "object"
      properties: 
        allow2g: 
          type: "boolean"
        allow3g: 
          type: "boolean"
        allow45g: 
          type: "boolean"
      additionalProperties: "false"
    OperatorPolicyReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        allow2g: 
          type: "boolean"
        allow3g: 
          type: "boolean"
        allow45g: 
          type: "boolean"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
      additionalProperties: "false"
    OperatorPolicyReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/OperatorPolicyReadModelV1"
      additionalProperties: "false"
    OperatorPolicyReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/OperatorPolicyReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    OperatorPolicyUpsertV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        vslice: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    OutboundSMSModelV1: 
      type: "object"
      properties: 
        payloadText: 
          type: "string"
          nullable: "true"
        payloadRaw: 
          type: "string"
          nullable: "true"
        headerRaw: 
          type: "string"
          nullable: "true"
        expiry: 
          type: "string"
          format: "date-time"
          nullable: "true"
        reference: 
          type: "string"
          nullable: "true"
        protocolId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        dataCodingScheme: 
          type: "integer"
          format: "int32"
          nullable: "true"
      additionalProperties: "false"
    OutboundSMSResponseModelV1: 
      type: "object"
      properties: 
        messageIds: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
      additionalProperties: "false"
    OutboundSMSResponseModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/OutboundSMSResponseModelV1"
      additionalProperties: "false"
    PacketAttributes: 
      type: "object"
      properties: 
        label: 
          type: "string"
          nullable: "true"
        value: 
          type: "string"
          nullable: "true"
        children: 
          type: "array"
          items: 
            $ref: "#/components/schemas/PacketAttributes"
          nullable: "true"
      additionalProperties: "false"
    PacketTracePacketModelV1: 
      type: "object"
      properties: 
        packetTime: 
          type: "string"
          format: "date-time"
          readOnly: "true"
        endpointId: 
          type: "string"
          nullable: "true"
          readOnly: "true"
        direction: 
          type: "string"
          nullable: "true"
        action: 
          type: "string"
          nullable: "true"
        sourceIp: 
          type: "string"
          nullable: "true"
        destinationIp: 
          type: "string"
          nullable: "true"
        transportProtocol: 
          type: "string"
          nullable: "true"
        sourcePort: 
          type: "string"
          nullable: "true"
        destinationPort: 
          type: "string"
          nullable: "true"
        applicationProtocol: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        totalLength: 
          type: "integer"
          format: "int32"
        ttl: 
          type: "integer"
          format: "int32"
        warnings: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    PacketTracePacketModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/PacketTracePacketModelV1"
          nullable: "true"
      additionalProperties: "false"
    RadiusServerReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
        routingTarget: 
          $ref: "#/components/schemas/IRelatedReadModel"
        radiusServerType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        sourceIp: 
          type: "string"
          nullable: "true"
        sourcePort: 
          type: "integer"
          format: "int32"
        destinationIp: 
          type: "string"
          nullable: "true"
        destinationPort: 
          type: "integer"
          format: "int32"
        radiusSecret: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RadiusServerReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/RadiusServerReadModelV1"
      additionalProperties: "false"
    RadiusServerReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RadiusServerReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    RadiusServerUpsertModelV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        routingTarget: 
          type: "string"
          nullable: "true"
        sourceIp: 
          type: "string"
          nullable: "true"
        destinationIp: 
          type: "string"
          nullable: "true"
        sourcePort: 
          type: "integer"
          format: "int32"
        destinationPort: 
          type: "integer"
          format: "int32"
        radiusSecret: 
          type: "string"
          nullable: "true"
        radiusServerType: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RadiusServerVsliceUpsertV1: 
      type: "object"
      properties: 
        radiusServer: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RateLimitLookupModelV1: 
      type: "object"
      properties: 
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
        displayOrder: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    RateLimitLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RateLimitLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    RegionalGatewayLookupModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    RegionalGatewayLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RegionalGatewayLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    RegionalGatewayPolicyEntryUpsertV1: 
      type: "object"
      properties: 
        regionalGatewayId: 
          type: "string"
          nullable: "true"
        operatorId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        iso3: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RegionalGatewayPolicyListModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
        isFixed: 
          type: "boolean"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
      additionalProperties: "false"
    RegionalGatewayPolicyListModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1"
      additionalProperties: "false"
    RegionalGatewayPolicyListModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RegionalGatewayPolicyListModelV1"
          nullable: "true"
      additionalProperties: "false"
    RegionalGatewayPolicyUpsertV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        vslice: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RoutingPolicyEdgeServiceReadModelV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        iconShape: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        available: 
          type: "boolean"
        enabled: 
          type: "boolean"
        hasInstance: 
          type: "boolean"
        hasMultipleInstances: 
          type: "boolean"
        edgeServiceInstanceId: 
          type: "string"
          format: "uuid"
          nullable: "true"
          deprecated: "true"
        edgeServiceInstanceIds: 
          type: "array"
          items: 
            type: "string"
            format: "uuid"
          nullable: "true"
      additionalProperties: "false"
    RoutingPolicyEdgeServiceUpsertV1: 
      type: "object"
      properties: 
        moniker: 
          type: "string"
          nullable: "true"
        enabled: 
          type: "boolean"
        edgeServiceInstanceId: 
          type: "string"
          format: "uuid"
          nullable: "true"
          deprecated: "true"
        edgeServiceInstanceIds: 
          type: "array"
          items: 
            type: "string"
            format: "uuid"
          nullable: "true"
      additionalProperties: "false"
    RoutingPolicyReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
        rateLimitUplink: 
          $ref: "#/components/schemas/Int16ILookupModel"
        rateLimitDownlink: 
          $ref: "#/components/schemas/Int16ILookupModel"
        packetDiscardUplinkPercentage: 
          type: "integer"
          format: "int32"
        packetDiscardDownlinkPercentage: 
          type: "integer"
          format: "int32"
        routingPolicyStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
        routingPolicyRules: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingPolicyRuleReadModelV1"
          nullable: "true"
        routingPolicyEdgeServices: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingPolicyEdgeServiceReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    RoutingPolicyReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/RoutingPolicyReadModelV1"
      additionalProperties: "false"
    RoutingPolicyReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingPolicyReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    RoutingPolicyRuleReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        routingPolicyId: 
          type: "string"
          format: "uuid"
        description: 
          type: "string"
          nullable: "true"
        ruleAction: 
          $ref: "#/components/schemas/Int16ILookupModel"
        ruleDirection: 
          $ref: "#/components/schemas/Int16ILookupModel"
        precedence: 
          type: "integer"
          format: "int32"
        sourceIpPattern: 
          type: "string"
          nullable: "true"
        destinationIpPattern: 
          type: "string"
          nullable: "true"
        divertIp: 
          type: "string"
          nullable: "true"
        divertPort: 
          type: "string"
          nullable: "true"
        transportProtocol: 
          $ref: "#/components/schemas/Int16ILookupModel"
        sourcePortPattern: 
          type: "string"
          nullable: "true"
        destinationPortPattern: 
          type: "string"
          nullable: "true"
        routingTarget: 
          $ref: "#/components/schemas/IRelatedReadModel"
        reflexive: 
          type: "boolean"
        enabled: 
          type: "boolean"
        regionalGateway: 
          $ref: "#/components/schemas/IRelatedReadModel"
      additionalProperties: "false"
    RoutingPolicyRuleUpsertV1: 
      type: "object"
      properties: 
        description: 
          type: "string"
          nullable: "true"
        ruleAction: 
          type: "string"
          nullable: "true"
        ruleDirection: 
          type: "string"
          nullable: "true"
        sourceIpPattern: 
          type: "string"
          nullable: "true"
        destinationIpPattern: 
          type: "string"
          nullable: "true"
        divertIp: 
          type: "string"
          nullable: "true"
        divertPort: 
          type: "string"
          nullable: "true"
        transportProtocol: 
          type: "string"
          nullable: "true"
        sourcePortPattern: 
          type: "string"
          nullable: "true"
        destinationPortPattern: 
          type: "string"
          nullable: "true"
        routingTarget: 
          type: "string"
          nullable: "true"
        reflexive: 
          type: "boolean"
        regionalGateway: 
          type: "string"
          nullable: "true"
        enabled: 
          type: "boolean"
      additionalProperties: "false"
    RoutingPolicyUpsertV1: 
      required: 
      - "routingPolicyStatus"
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        vslice: 
          type: "string"
          nullable: "true"
        routingPolicyStatus: 
          minLength: "1"
          type: "string"
        routingPolicyRules: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingPolicyRuleUpsertV1"
          nullable: "true"
        routingPolicyEdgeServices: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingPolicyEdgeServiceUpsertV1"
          nullable: "true"
        rateLimitUplinkMoniker: 
          type: "string"
          nullable: "true"
        rateLimitDownlinkMoniker: 
          type: "string"
          nullable: "true"
        packetDiscardUplinkPercentage: 
          type: "integer"
          format: "int32"
        packetDiscardDownlinkPercentage: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    RoutingRedundancyZoneReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RoutingRedundancyZoneReadModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingRedundancyZoneReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    RoutingTargetReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        routingTargetType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        routingTargetStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
        vslice: 
          $ref: "#/components/schemas/IRelatedReadModel"
        configurationData: 
          $ref: "#/components/schemas/ConfigurationData"
        publicInstanceConfiguration: 
          type: "string"
          nullable: "true"
        networkKey: 
          type: "integer"
          format: "int32"
        routingTargetTypeInstanceId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        routingRedundancyZoneMoniker: 
          type: "string"
          nullable: "true"
        routingRedundancyZoneName: 
          type: "string"
          nullable: "true"
        regionalGatewayMoniker: 
          type: "string"
          nullable: "true"
        regionalGatewayName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RoutingTargetReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/RoutingTargetReadModelV1"
      additionalProperties: "false"
    RoutingTargetReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/RoutingTargetReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    RoutingTargetTypeInstanceReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        publicInstanceConfiguration: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    RoutingTargetTypeInstanceReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/RoutingTargetTypeInstanceReadModelV1"
      additionalProperties: "false"
    RoutingTargetUpsertV1: 
      required: 
      - "routingTargetType"
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        routingTargetType: 
          minLength: "1"
          type: "string"
        routingRedundancyZoneMoniker: 
          type: "string"
          nullable: "true"
        configurationData: 
          $ref: "#/components/schemas/ConfigurationData"
        vslice: 
          type: "string"
          nullable: "true"
        routingTargetTypeInstanceId: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    RoutingTargetVpn: 
      type: "object"
      properties: 
        remotePeerAddress: 
          type: "string"
          nullable: "true"
        remoteSubnets: 
          type: "string"
          nullable: "true"
        remoteEncryptionDomain: 
          type: "string"
          nullable: "true"
        localEncryptionDomain: 
          type: "string"
          nullable: "true"
        localSubnets: 
          type: "string"
          nullable: "true"
        presharedKey: 
          type: "string"
          nullable: "true"
        keyExchangeType: 
          type: "string"
          nullable: "true"
        vpnIkeOption: 
          type: "string"
          nullable: "true"
        vpnEspOption: 
          type: "string"
          nullable: "true"
        phase1Lifetime: 
          type: "integer"
          format: "int32"
        phase2Lifetime: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    RoutingTargetWireguard: 
      type: "object"
      properties: 
        localPublicKey: 
          type: "string"
          nullable: "true"
        localSubnets: 
          type: "string"
          nullable: "true"
        remotePublicKey: 
          type: "string"
          nullable: "true"
        remoteSubnets: 
          type: "string"
          nullable: "true"
        remotePeerIPAddress: 
          type: "string"
          nullable: "true"
        remotePeerPortNumber: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    SignallingTracePacketModelV1: 
      type: "object"
      properties: 
        packetTime: 
          type: "string"
          format: "date-time"
          readOnly: "true"
        direction: 
          type: "string"
          nullable: "true"
        packetAttributes: 
          $ref: "#/components/schemas/PacketAttributes"
        summary: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    SignallingTracePacketModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/SignallingTracePacketModelV1"
          nullable: "true"
      additionalProperties: "false"
    SponsorOperatorViewModelV1: 
      type: "object"
      properties: 
        sponsorName: 
          type: "string"
          nullable: "true"
        sponsorId: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    SponsorOperatorViewModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/SponsorOperatorViewModelV1"
          nullable: "true"
      additionalProperties: "false"
    SubnetworkReadModelV1: 
      type: "object"
      properties: 
        ipSubnetAddressId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        subnetAddress: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    SubscriptionType: 
      required: 
      - "active"
      type: "object"
      properties: 
        key: 
          type: "integer"
          format: "int32"
        id: 
          type: "integer"
          format: "int32"
        name: 
          maxLength: "50"
          minLength: "0"
          type: "string"
          nullable: "true"
        moniker: 
          maxLength: "20"
          minLength: "0"
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    TariffElement: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        moniker: 
          maxLength: "50"
          minLength: "0"
          type: "string"
          nullable: "true"
        name: 
          maxLength: "100"
          minLength: "0"
          type: "string"
          nullable: "true"
        description: 
          maxLength: "100"
          minLength: "0"
          type: "string"
          nullable: "true"
        tariffMatchTypeId: 
          type: "integer"
          format: "int32"
        rootZoneOnly: 
          type: "boolean"
        rateUnits: 
          maxLength: "10"
          minLength: "0"
          type: "string"
          nullable: "true"
        hasMinimumQuantity: 
          type: "boolean"
        hasIncrementQuantity: 
          type: "boolean"
        hasBlock: 
          type: "boolean"
        tariffMatchType: 
          $ref: "#/components/schemas/TariffMatchType"
      additionalProperties: "false"
    TariffElementListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TariffElement"
          nullable: "true"
      additionalProperties: "false"
    TariffEntryElementReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        element: 
          type: "string"
          nullable: "true"
        rate: 
          type: "number"
          format: "double"
        formattedRate: 
          type: "string"
          nullable: "true"
        minimumQuantity: 
          type: "integer"
          format: "int32"
          nullable: "true"
        incrementQuantity: 
          type: "integer"
          format: "int32"
          nullable: "true"
      additionalProperties: "false"
    TariffEntryReadModelV1: 
      type: "object"
      properties: 
        iso3: 
          type: "string"
          nullable: "true"
        country: 
          type: "string"
          nullable: "true"
        mcc: 
          type: "string"
          nullable: "true"
        mnc: 
          type: "string"
          nullable: "true"
        description: 
          type: "string"
          nullable: "true"
        tadig: 
          type: "string"
          nullable: "true"
        elements: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TariffEntryElementReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    TariffEntryReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TariffEntryReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    TariffMatchType: 
      required: 
      - "active"
      type: "object"
      properties: 
        id: 
          type: "integer"
          format: "int32"
        name: 
          maxLength: "100"
          minLength: "0"
          type: "string"
          nullable: "true"
        moniker: 
          maxLength: "20"
          minLength: "0"
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    TariffZoneModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        parentZoneId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        networkOperatorId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        iso3: 
          type: "string"
          nullable: "true"
        rates: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TariffZoneRateV1"
          nullable: "true"
        children: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TariffZoneModelV1"
          nullable: "true"
      additionalProperties: "false"
    TariffZoneRateV1: 
      type: "object"
      properties: 
        block: 
          type: "boolean"
          nullable: "true"
        rate: 
          type: "number"
          format: "double"
        formattedRate: 
          type: "string"
          nullable: "true"
        dataMinimumQuantity: 
          type: "integer"
          format: "int32"
          nullable: "true"
        dataIncrementQuantity: 
          type: "integer"
          format: "int32"
          nullable: "true"
        tariffElementId: 
          type: "integer"
          format: "int32"
        hostOperatorId: 
          type: "integer"
          format: "int32"
          nullable: "true"
        hostOperatorName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    TariffZoneSchemeModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        description: 
          type: "string"
          nullable: "true"
        zoneSchemeId: 
          type: "string"
          format: "uuid"
          nullable: "true"
        zoneSchemeMoniker: 
          type: "string"
          nullable: "true"
        currency: 
          $ref: "#/components/schemas/Currency"
        tariffTree: 
          $ref: "#/components/schemas/TariffZoneModelV1"
      additionalProperties: "false"
    TariffZoneSchemeModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/TariffZoneSchemeModelV1"
      additionalProperties: "false"
    TenantApnSpecificationReadModelV1: 
      type: "object"
      properties: 
        apnMatchDefault: 
          type: "string"
          nullable: "true"
        apnPattern: 
          type: "string"
          nullable: "true"
        apnPatternRegex: 
          type: "string"
          nullable: "true"
          readOnly: "true"
      additionalProperties: "false"
    TenantApnSpecificationReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/TenantApnSpecificationReadModelV1"
      additionalProperties: "false"
    ThemeReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        logo: 
          type: "string"
          nullable: "true"
        settings: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    ThemeReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/ThemeReadModelV1"
      additionalProperties: "false"
    ThemeReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/ThemeReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    ThemeUpsertModelV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        logo: 
          type: "string"
          nullable: "true"
        settings: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    TraceSessionReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
          readOnly: "true"
        endpoint: 
          $ref: "#/components/schemas/EndpointSummaryReadModel"
        startTime: 
          type: "string"
          format: "date-time"
        endTime: 
          type: "string"
          format: "date-time"
          nullable: "true"
        packetCount: 
          type: "integer"
          format: "int32"
          nullable: "true"
        byteCount: 
          type: "integer"
          format: "int32"
          nullable: "true"
        expiry: 
          type: "string"
          format: "date-time"
        customerId: 
          type: "string"
          format: "uuid"
        packetLimit: 
          type: "integer"
          format: "int32"
        byteLimit: 
          type: "integer"
          format: "int32"
        secondLimit: 
          type: "integer"
          format: "int32"
        traceSessionFormat: 
          $ref: "#/components/schemas/Int16ILookupModel"
        traceSessionStatus: 
          $ref: "#/components/schemas/Int16ILookupModel"
      additionalProperties: "false"
    TraceSessionReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/TraceSessionReadModelV1"
      additionalProperties: "false"
    TraceSessionReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TraceSessionReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    TraceSessionUpsertModelV1: 
      type: "object"
      properties: 
        endpointId: 
          type: "string"
          format: "uuid"
        durationMinutes: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    TransportProtocolLookupModelV1: 
      type: "object"
      properties: 
        protocolNumber: 
          type: "integer"
          format: "int32"
        name: 
          type: "string"
          nullable: "true"
        hasPorts: 
          type: "boolean"
        moniker: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
      additionalProperties: "false"
    TransportProtocolLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/TransportProtocolLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    UserCustomerRoleModelV1: 
      type: "object"
      properties: 
        roleId: 
          type: "integer"
          format: "int32"
        roleName: 
          type: "string"
          nullable: "true"
        roleMoniker: 
          type: "string"
          nullable: "true"
        createdTime: 
          type: "string"
          format: "date-time"
        createdByFirstName: 
          type: "string"
          nullable: "true"
        createdByLastName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    UserInviteModelV1: 
      type: "object"
      properties: 
        email: 
          type: "string"
          nullable: "true"
        firstname: 
          type: "string"
          nullable: "true"
        lastname: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    UserProfileReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        createdTime: 
          type: "string"
          format: "date-time"
        email: 
          type: "string"
          nullable: "true"
        username: 
          type: "string"
          nullable: "true"
        firstName: 
          type: "string"
          nullable: "true"
        lastName: 
          type: "string"
          nullable: "true"
        invitePending: 
          type: "boolean"
        invitedTime: 
          type: "string"
          format: "date-time"
          nullable: "true"
        inviteAcceptedTime: 
          type: "string"
          format: "date-time"
          nullable: "true"
        customerRoles: 
          type: "array"
          items: 
            $ref: "#/components/schemas/UserCustomerRoleModelV1"
          nullable: "true"
        tenantRoles: 
          type: "array"
          items: 
            $ref: "#/components/schemas/UserTenantRoleModelV1"
          nullable: "true"
      additionalProperties: "false"
    UserProfileReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/UserProfileReadModelV1"
      additionalProperties: "false"
    UserProfileReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/UserProfileReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    UserTenantRoleModelV1: 
      type: "object"
      properties: 
        roleId: 
          type: "integer"
          format: "int32"
        roleName: 
          type: "string"
          nullable: "true"
        roleMoniker: 
          type: "string"
          nullable: "true"
        createdTime: 
          type: "string"
          format: "date-time"
        createdByFirstName: 
          type: "string"
          nullable: "true"
        createdByLastName: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    VpnAuthenticationAlgorithmLookupModelV1: 
      type: "object"
      properties: 
        key: 
          type: "integer"
          format: "int32"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
        integrityCheckValueLength: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    VpnAuthenticationAlgorithmLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/VpnAuthenticationAlgorithmLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    VpnEncryptionAlgorithmLookupModelV1: 
      type: "object"
      properties: 
        key: 
          type: "integer"
          format: "int32"
        moniker: 
          type: "string"
          nullable: "true"
        name: 
          type: "string"
          nullable: "true"
        active: 
          type: "boolean"
        aead: 
          type: "boolean"
        ciphertextBlockSize: 
          type: "integer"
          format: "int32"
        initializationVectorLength: 
          type: "integer"
          format: "int32"
        integrityCheckValueLength: 
          type: "integer"
          format: "int32"
      additionalProperties: "false"
    VpnEncryptionAlgorithmLookupModelV1ListMethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/VpnEncryptionAlgorithmLookupModelV1"
          nullable: "true"
      additionalProperties: "false"
    VsliceReadModelV1: 
      type: "object"
      properties: 
        id: 
          type: "string"
          format: "uuid"
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        subnets: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        dnsServers: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        eventMap: 
          $ref: "#/components/schemas/IRelatedReadModel"
        dnsMode: 
          $ref: "#/components/schemas/Int16ILookupModel"
        ipAddressFamily: 
          $ref: "#/components/schemas/Int16ILookupModel"
        ipAllocationType: 
          $ref: "#/components/schemas/Int16ILookupModel"
        endpointGroupCount: 
          type: "integer"
          format: "int32"
          readOnly: "true"
        endpointCount: 
          type: "integer"
          format: "int32"
          readOnly: "true"
        usageRolling24H: 
          type: "integer"
          format: "int64"
        usageRolling7D: 
          type: "integer"
          format: "int64"
        usageRolling28D: 
          type: "integer"
          format: "int64"
        usageRolling1Y: 
          type: "integer"
          format: "int64"
        usageListHourly24H: 
          type: "string"
          nullable: "true"
        usageListDaily28D: 
          type: "string"
          nullable: "true"
        usageListMonthly12M: 
          type: "string"
          nullable: "true"
        chargeRolling24H: 
          type: "number"
          format: "double"
        chargeRolling7D: 
          type: "number"
          format: "double"
        chargeRolling28D: 
          type: "number"
          format: "double"
        chargeRolling1Y: 
          type: "number"
          format: "double"
        chargeListHourly24H: 
          type: "string"
          nullable: "true"
        chargeListDaily28D: 
          type: "string"
          nullable: "true"
        chargeListMonthly12M: 
          type: "string"
          nullable: "true"
        apnMatch: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
    VsliceReadModelV1MethodResult: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        data: 
          $ref: "#/components/schemas/VsliceReadModelV1"
      additionalProperties: "false"
    VsliceReadModelV1MethodResultList: 
      type: "object"
      properties: 
        success: 
          type: "boolean"
        messages: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        totalItems: 
          type: "integer"
          format: "int32"
        limit: 
          type: "integer"
          format: "int32"
        offset: 
          type: "integer"
          format: "int32"
        data: 
          type: "array"
          items: 
            $ref: "#/components/schemas/VsliceReadModelV1"
          nullable: "true"
      additionalProperties: "false"
    VsliceUpsertModelV1: 
      type: "object"
      properties: 
        name: 
          type: "string"
          nullable: "true"
        moniker: 
          type: "string"
          nullable: "true"
        dnsServers: 
          type: "array"
          items: 
            type: "string"
          nullable: "true"
        dnsMode: 
          type: "string"
          nullable: "true"
        ipAddressFamily: 
          type: "string"
          nullable: "true"
        subnetAddress: 
          type: "string"
          nullable: "true"
        ipAllocationType: 
          type: "string"
          nullable: "true"
        eventMap: 
          type: "string"
          nullable: "true"
        apnMatch: 
          type: "string"
          nullable: "true"
      additionalProperties: "false"
  securitySchemes: 
    Bearer: 
      type: "http"
      scheme: "Bearer"
      bearerFormat: "JWT"
security: 
-
  Bearer: 
